name: build-RaspBerryPi4B-Custom-Enhanced-24.10.0

on:
  workflow_dispatch:
    inputs:
      include_docker:
        description: '是否编译 Docker 插件'
        required: true
        default: 'no'
        type: choice
        options:
          - 'yes'
          - 'no'
      size:
        description: '请输入要编译固件大小 单位(MB)'
        required: true
        default: '2048'
      
      

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Free Disk Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Set executable permissions
        run: |
          chmod +x ${{ github.workspace }}/raspberrypi/24.10/build.sh
          chmod +x ${{ github.workspace }}/raspberrypi/24.10/prepare-feeds.sh

      - name: Prepare Third-party Packages
        if: github.event.inputs.include_lucky == 'yes' || github.event.inputs.include_third_party == 'yes'
        run: |
          # 创建第三方包准备脚本
          mkdir -p ${{ github.workspace }}/third-party-packages
          
          # 下载lucky相关包
          if [ "${{ github.event.inputs.include_lucky }}" == "yes" ]; then
            echo "Downloading Lucky packages..."
            cd ${{ github.workspace }}/third-party-packages
            
            # 下载lucky luci应用
            git clone https://github.com/gdy666/luci-app-lucky.git
            
            # 下载lucky核心程序（如果需要）
            git clone https://github.com/gdy666/lucky.git
          fi

      - name: Build RaspberryPi 4B ImmortalWrt 24.10.0 with Third-party Packages
        run: |
          profile="rpi-4"
          tag="bcm27xx-bcm2711-openwrt-24.10.0"
          echo "cpu=bcm2711" >> $GITHUB_ENV
          
          include_docker="${{ github.event.inputs.include_docker }}"
          size="${{ github.event.inputs.size }}"
          include_lucky="${{ github.event.inputs.include_lucky }}"
          include_third_party="${{ github.event.inputs.include_third_party }}"
          
          echo "Building for Raspberry Pi 4B with profile: $profile"
          echo "Docker support: $include_docker"
          echo "Lucky support: $include_lucky"
          echo "Third-party packages: $include_third_party"
          echo "Firmware size: ${size}MB"
          
          docker run --rm -i \
            --user root \
            -v "${{ github.workspace }}/bin:/home/build/immortalwrt/bin" \
            -v "${{ github.workspace }}/files:/home/build/immortalwrt/files" \
            -v "${{ github.workspace }}/third-party-packages:/home/build/third-party-packages" \
            -v "${{ github.workspace }}/raspberrypi/24.10/build.sh:/home/build/openwrt/build.sh" \
            -v "${{ github.workspace }}/raspberrypi/24.10/prepare-feeds.sh:/home/build/openwrt/prepare-feeds.sh" \
            -e PROFILE=$profile \
            -e INCLUDE_DOCKER=$include_docker \
            -e INCLUDE_LUCKY=$include_lucky \
            -e INCLUDE_THIRD_PARTY=$include_third_party \
            -e ROOTSIZE=$size \
            immortalwrt/imagebuilder:$tag /bin/bash -c "
              # 执行feeds准备脚本
              if [ -f /home/build/openwrt/prepare-feeds.sh ]; then
                /bin/bash /home/build/openwrt/prepare-feeds.sh
              fi
              # 执行主构建脚本
              /bin/bash /home/build/openwrt/build.sh
            "
          
          echo "Build completed, listing output files:"
          ls -la ${{ github.workspace }}/bin/targets/bcm27xx/${{ env.cpu }}/

      - name: Generate Firmware SHA-256
        run: |
          cd ${{ github.workspace }}
          cp bin/targets/bcm27xx/${{ env.cpu }}/*squashfs-factory.img.gz ./
          
          for file in *squashfs-factory.img.gz; do
            if [ -f "$file" ]; then
              echo "Generating SHA-256 for $file"
              sha256sum "$file" > "$file.sha256"
              sha256sum -c "$file.sha256"
            fi
          done

      - name: Create Release Info
        run: |
          cd ${{ github.workspace }}
          echo "# 树莓派4B定制固件 - 增强版" > release_info.md
          echo "" >> release_info.md
          echo "## 固件特性" >> release_info.md
          echo "- 🍓 专为树莓派4B优化" >> release_info.md
          echo "- 🌐 支持AX88179B USB转RJ45网卡" >> release_info.md
          echo "- 🛠️ 内置常用调试工具(lsusb, htop, tcpdump等)" >> release_info.md
          echo "- 🚀 包含ZeroTier网络支持" >> release_info.md
          echo "- 💻 预装zsh shell" >> release_info.md
          echo "- 📁 文件管理器和Web终端" >> release_info.md
          
          if [ "${{ github.event.inputs.include_lucky }}" == "yes" ]; then
            echo "- 🍀 包含Lucky软件包" >> release_info.md
          fi
          
          if [ "${{ github.event.inputs.include_third_party }}" == "yes" ]; then
            echo "- 📦 包含第三方软件包" >> release_info.md
          fi
          
          echo "" >> release_info.md
          echo "## 构建信息" >> release_info.md
          echo "- 构建时间: $(date '+%Y-%m-%d %H:%M:%S')" >> release_info.md
          echo "- 固件大小: ${{ github.event.inputs.size }}MB" >> release_info.md
          
          if [ "${{ github.event.inputs.include_docker }}" == "yes" ]; then
            echo "- Docker支持: ✅ 已启用" >> release_info.md
          else
            echo "- Docker支持: ❌ 未启用" >> release_info.md
          fi
          
          echo "" >> release_info.md
          echo "## 默认登录信息" >> release_info.md
          echo "- IP地址: 192.168.2.253" >> release_info.md
          echo "- 用户名: root" >> release_info.md
          echo "- 密码: password" >> release_info.md
          echo "- FileBrowser: 用户名admin, 密码admin" >> release_info.md

      - name: Upload ImmortalWrt as release assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: RaspberryPi4B-Enhanced-$(date '+%Y%m%d-%H%M%S')
          name: 树莓派4B增强定制固件 - $(date '+%Y-%m-%d')
          body_path: ${{ github.workspace }}/release_info.md
          files: |
            ${{ github.workspace }}/*.img.gz
            ${{ github.workspace }}/*.sha256
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
